
Vulkan的渲染流程是一个复杂但高效的过程，它涉及多个子流程，这些子流程共同协作以完成一帧的渲染。
以下是对Vulkan渲染流程中子流程的一个概述：

一、初始化阶段
初始化Vulkan环境：
包括
创建VkInstance（与应用程序进程一一对应，并提供验证层用于调试）、
初始化窗口句柄（用于控制和响应窗口的各种变化，如键鼠输入、窗口尺寸变化等）

初始化Vulkan组件：
包括创建VkPhysicalDevice（对应物理意义上的GPU）、
VkDevice（对应GPU的驱动程序）、
SwapChain（交换链，存储了当前帧将要提交到GPU渲染的图片VkImage）等

二、资源准备阶段
创建深度Image/ImageViews：
存储每个面元的深度信息，以保证在屏幕纵深上的渲染顺序正确。
创建CommandPool和CommandQueue：CommandPool分配绘制指令所需的CommandBuffers，程序员向CommandBuffers提交绘制指令，
然后Submit到Queue，Queue再Present到显示器得到最终画面。

创建RenderPass：
RenderPass是整个Render Pipeline的一次执行，它定义了渲染流程以及使用的所有资源的描述。
每个RenderPass必须有一个或多个子步骤，这些子步骤被称为SubPass。

三、渲染流程的子流程（SubPass）
SubPass的定义：
在Vulkan中，SubPass是RenderPass中的一个子步骤，它使用RenderPass中定义的资源描述进行渲染。
每个SubPass都可以引用一个或多个Attachment（附着），这些Attachment可能是颜色附着、深度/模板附着、解析附着或输入附着等。
Attachment的加载和存储操作：
在SubPass中，可以对Attachment进行加载（Load）和存储（Store）操作。
这些操作决定了在渲染之前和渲染之后对附着中的数据进行的处理。

渲染操作：
在SubPass中，执行实际的渲染操作，如顶点着色、光栅化、片段着色等。
这些操作依赖于SubPass中引用的Attachment，并且可能产生新的渲染结果。

四、同步和提交阶段
同步原语：
Vulkan提供Semaphore（信号量）和Fence等同步原语，用于保证GPU内操作和GPU-CPU间操作的同步。
这些同步原语在每帧的渲染流程中是至关重要的。

提交渲染命令：
将录制好的绘制指令提交到CommandQueue中，等待GPU执行。
在提交过程中，可能需要持有一个Fence来阻塞CPU，直到GPU完成上一帧的渲染；
同时持有一个Semaphore来保证接下来执行显示Present操作

五、显示阶段
Present操作：
将渲染完成的帧提交到显示器上进行显示。在这个过程中，SwapChain会更新当前显示的图像，并将新渲染的图像作为下一帧的渲染目标。

总结
Vulkan的渲染流程通过多个子流程（SubPass）共同协作完成一帧的渲染。
每个SubPass都定义了其使用的资源、执行的渲染操作以及与其他SubPass之间的依赖关系。
通过合理的配置和优化，Vulkan可以充分利用GPU的性能，实现高效、流畅的渲染效果。